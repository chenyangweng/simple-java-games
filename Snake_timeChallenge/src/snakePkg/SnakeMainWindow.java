/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snakePkg;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 * The main window...
 *
 * @author wengc
 */
public final class SnakeMainWindow extends javax.swing.JFrame implements KeyListener {

    SnakeDrawer snakeDrawer;
    AppParameters appParameters;
    ExecutorService pool;
    Countdown countdown;

    /**
     * Creates new form SnakeMainWindow
     */
    public SnakeMainWindow() {
        this.appParameters = new AppParameters();
        initComponents();
        this.readTableDataFromFile();
        
        this.snakeDrawer = new SnakeDrawer(appParameters, this.jPanel1, this);
        this.countdown = new Countdown(this.jLabelCountdown, this.snakeDrawer, this.appParameters.totalPlayTimeMilliSecond);
        this.startNewGame();
        
        //jtable 
        this.jTable1.setAutoCreateRowSorter(true);
        this.jTable1.getRowSorter().toggleSortOrder(1);
        ((TableRowSorter)this.jTable1.getRowSorter()).setSortsOnUpdates(true);

    }

    final void startNewGame() {
        if (pool == null) {
            this.pool = Executors.newFixedThreadPool(1);
        }
        this.snakeDrawer.startNewGame();
        this.pool.execute(this.snakeDrawer);
        this.countdown.startCountdown();
        //this.pool.submit(snakeDrawer);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.out.println("Shutting down pool.");
            this.pool.shutdownNow();
        }, "Shutdown-thread"));
        this.setFocusable(true); // To make sure the jframe key listener works
    }

    
    
    //////////////////////////    Table related!!!!!!!!
    void addNewRowToJTable(String username, int snakeLength) {
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        model.addRow(new Object[]{username, snakeLength});
    }

    void saveTableDataToFile() {
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        if (model.getRowCount()==0){
            return;
        }
        FileOutputStream f;
        ObjectOutputStream o;
        Object[][] tableData = new Object[model.getRowCount()][model.getColumnCount()];
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < model.getColumnCount(); j++) {
                tableData[i][j] = this.jTable1.getValueAt(i, j);
            }
        }
        try {
            f = new FileOutputStream(new File(this.appParameters.tableDataName));
            o = new ObjectOutputStream(f);

            // Write objects to file
            o.writeObject(tableData);

            o.close();
            f.close();

        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        }catch (IOException e) {
            System.out.println("Error initializing stream");
        }

    }

    void readTableDataFromFile() {
        FileInputStream fi;
        ObjectInputStream oi;
        Object[][] tableData;
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();

        try {
            fi = new FileInputStream(new File(this.appParameters.tableDataName));
            oi = new ObjectInputStream(fi);

            // Read objects
            tableData = (Object[][]) oi.readObject();
            for (Object[] data : tableData) {
                model.addRow(data);
            }
            oi.close();
            fi.close();

        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        } catch (IOException e) {
            System.out.println("Error initializing stream");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SnakeMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonNewGame = new javax.swing.JButton();
        jLabelCountdown = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("蛇吃屎 by C.Weng. 19w30, Tuve.");
        setPreferredSize(new java.awt.Dimension(520, 556));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(520, 540));

        jPanel1.setLayout(new java.awt.GridLayout(this.appParameters.gridRows, this.appParameters.gridCols));

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jButtonNewGame.setText("New Game (新游戏)");
        jButtonNewGame.setFocusable(false);
        jButtonNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewGameActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonNewGame);

        jLabelCountdown.setBackground(new java.awt.Color(255, 255, 255));
        jLabelCountdown.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCountdown.setForeground(new java.awt.Color(255, 0, 51));
        jLabelCountdown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCountdown.setText("00:00");
        jLabelCountdown.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelCountdown.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(jLabelCountdown);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Snake length"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jMenu2.setText("About");

        jMenuItem2.setText("About this app...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)))
                .addContainerGap())
        );

        this.addKeyListener(this);

        setBounds(0, 0, 729, 611);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Made by C.Weng for VCC kids. 19w43, Tuve.");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButtonNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewGameActionPerformed
        // TODO add your handling code here:
        if (!this.snakeDrawer.isAlive()) {
            this.startNewGame();
        }
    }//GEN-LAST:event_jButtonNewGameActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.saveTableDataToFile();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakeMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SnakeMainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNewGame;
    private javax.swing.JLabel jLabelCountdown;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent arg0) {
    }

    @Override
    /**
     * Change direction dir: up: [-1, 0] down: [1, 0] left: [0, -1] right: [0,
     * 1] Changing direction in the same axis will be ignored.
     */
    public void keyPressed(KeyEvent arg0) {
        int[] newDir = new int[2];
        int ud = this.snakeDrawer.dir[0];
        int lr = this.snakeDrawer.dir[1];
        if ((arg0.getKeyCode() == KeyEvent.VK_UP || arg0.getKeyCode() == KeyEvent.VK_DOWN) && ud == 0) {
            newDir[1] = 0;
            if (arg0.getKeyCode() == KeyEvent.VK_UP) {
                newDir[0] = -1;
            } else {
                newDir[0] = 1;
            }
        } else if ((arg0.getKeyCode() == KeyEvent.VK_LEFT || arg0.getKeyCode() == KeyEvent.VK_RIGHT) && lr == 0) {
            newDir[0] = 0;
            if (arg0.getKeyCode() == KeyEvent.VK_LEFT) {
                newDir[1] = -1;
            } else {
                newDir[1] = 1;
            }
        }
        // I realize that it is not sufficient to check if the new dir is ok or not by only looking at the dir vector itself.
        if (this.snakeDrawer.isNewDirOk(newDir)) {
            this.snakeDrawer.dir = newDir;
        }
    }

    @Override
    public void keyReleased(KeyEvent arg0) {
        if (!this.snakeDrawer.isAlive() && arg0.getKeyCode() == KeyEvent.VK_ENTER) {
            this.startNewGame();
        }
    }
}
